Part 1: Postfix Evaluator 

The client program, postfix.cpp, evaluates postfix expressions using stacks. The use of the stack data structure in this program ensures that operations are performed in the correct order according to postfix expression evaluation rules, in addition to keeping track of operands. The main function directs user input, checks expression validity, and calls the evalPostfix function, with exception handling for errors. Exception classes are defined for handling invalid expressions (DataError) and division by zero (DivisionByZero).  The program also uses a do-while loop that can lead the program to run again based on user input. The performOperation method handles basic arithmetic operations, such as +, -, *, /, and %. The evalPostfix method is where the stack data structure is utilized to evaluate the postfix expression. A stack of integers (opStack) is created to store operands encountered while processing the postfix expression. The evalPostfix method iterates through the input postfix expression, processing operands, and operators, and handling different scenarios such as consecutive negative integers, intOp attachments, or opInt attachments. When an operand is encountered, it is pushed onto the stack. When an operator is encountered, the top two operands are popped from the stack, the operation is performed, and the result is pushed back onto the stack.

Part 2: Converting Infix to Prefix

The program, myBet.cpp, converts infix expressions to prefix expressions. First, the program reads infix expressions from the "infix.dat" file, with error handling for file opening issues. The infixToPostfix method is then called, which processes the input infix expression character by character. The infixToPostfix method utilizes a stack to handle operators during the conversion process. Operands are immediately added to the postfix expression, while operators are pushed onto a stack based on their precedence. Any opening parenthesis encountered is pushed onto the stack, whereas when a closing parenthesis is encountered, all stack symbols are popped until it finds a ‘(‘. For other operators, they are pushed onto the stack if their precedence is higher than the operator at the top of the stack or if the stack is empty. The resulting postfix expression is then utilized by the buildTree function to construct a binary expression tree. The buildTree method uses a stack to construct the binary expression tree (BET) from the postfix expression. The buildTree function iterates through the postfix expression, creating nodes for each operand and operator. When an operand is encountered in the postfix expression, a new node is created and pushed onto the stack. Operators trigger the creation of new nodes with their left and right children, which are popped from the stack and assigned accordingly. After the tree has been constructed, the preorder traversal function is called, which prints each node's value as the corresponding prefix expression. The algorithm is also designed to handle issues such as insufficient operands during BET construction and file opening errors.
